import React, { useState } from 'react';
import { Scale, Send, Loader2 } from 'lucide-react';

// Update this to your Supabase project URL
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;

function App() {
  const [query, setQuery] = useState('');
  const [response, setResponse] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!query.trim()) return;

    setLoading(true);
    setError('');
    setResponse('');

    try {
      const res = await fetch(`${SUPABASE_URL}/functions/v1/legal-assist`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY}`,
        },
        body: JSON.stringify({ query }),
      });

      if (!res.ok) {
        const errorData = await res.json().catch(() => ({}));
        throw new Error(errorData.error || `Server responded with status: ${res.status}`);
      }

      const data = await res.json();

      if (data.error) {
        setError(data.error);
      } else if (data.response) {
        setResponse(data.response);
      } else {
        setError('Received empty response from server');
      }
    } catch (error) {
      console.error('Error:', error);
      setError(
        error instanceof Error
          ? error.message
          : 'An error occurred while processing your request. Please try again.'
      );
    } finally {
      setLoading(false);
    }
  };

  // Function to format the response with proper line breaks
  const formatResponse = (text: string) => {
    // Replace <br> tags with actual line breaks for display
    return text.split('<br>').map((part, index) => (
      <React.Fragment key={index}>
        {part}
        {index < text.split('<br>').length - 1 && <br />}
      </React.Fragment>
    ));
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-900 to-gray-800 text-white">
      <div className="container mx-auto px-4 py-8">
        <header className="text-center mb-12">
          <div className="flex items-center justify-center mb-4">
            <Scale className="w-12 h-12 text-blue-400" />
          </div>
          <h1 className="text-4xl font-bold mb-2">Legal Assistant</h1>
          <p className="text-gray-400">
            Get information about Indian Penal Code sections based on your
            scenario
          </p>
        </header>

        <div className="max-w-3xl mx-auto">
          <form onSubmit={handleSubmit} className="mb-8">
            <div className="relative">
              <textarea
                value={query}
                onChange={(e) => setQuery(e.target.value)}
                placeholder="Describe your scenario here... (e.g., 'Someone stole my phone from my pocket in a crowded market')"
                className="w-full h-32 px-4 py-3 bg-gray-800 border border-gray-700 rounded-lg focus:outline-none focus:border-blue-500 text-white placeholder-gray-500 resize-none"
              />
              <button
                type="submit"
                disabled={loading}
                className="absolute bottom-3 right-3 bg-blue-600 text-white p-2 rounded-full hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {loading ? (
                  <Loader2 className="w-5 h-5 animate-spin" />
                ) : (
                  <Send className="w-5 h-5" />
                )}
              </button>
            </div>
          </form>

          {error && (
            <div className="bg-red-900/30 border border-red-700 rounded-lg p-4 mb-6">
              <p className="text-red-300">{error}</p>
            </div>
          )}

          {response && (
            <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
              <div className="text-gray-300">{formatResponse(response)}</div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default App;